<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-24T23:16:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jimmy Gam</title><subtitle>A journey to dream</subtitle><entry><title type="html">Technical temrs for Linux</title><link href="http://localhost:4000/linux3/" rel="alternate" type="text/html" title="Technical temrs for Linux" /><published>2019-04-22T00:00:00+09:00</published><updated>2019-04-22T00:00:00+09:00</updated><id>http://localhost:4000/linux3</id><content type="html" xml:base="http://localhost:4000/linux3/">&lt;h2 id=&quot;io-redirection&quot;&gt;IO Redirection&lt;/h2&gt;

&lt;p&gt;IO redirection is an abbreviation of Input output redirection. What is input and output and what does it mean to redirect them?&lt;/p&gt;

&lt;p&gt;In computing, there exists a process, an instance of working program or command. This process can work by itself but usually and conventionally, it takes inputs and produces results depending on the inputs.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;conosle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'korin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two processes have a huge difference. The first one does not take input whereas the second one takes input. Using inputs, we can program dynamically, which means we can use the same functios to different inputs and don’t have to write same code over and over.&lt;/p&gt;

&lt;p&gt;Now what is redirection?&lt;/p&gt;

&lt;p&gt;When we do console.log, we get the results on CLI, or terminal(MAC lovers.) That is because, output is supposed to be shown as an standard output(stdout.) We can redirect the output to a file as well.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, hello doesn’t not get printed on terminal. Rather, a new file is created named as result.txt. This file then contains ‘hello’ on the first line. What happened? We redirected standard output to a file called result.txt.&lt;/p&gt;

&lt;h2 id=&quot;linux--shell&quot;&gt;Linux &amp;amp; Shell&lt;/h2&gt;

&lt;p&gt;Let’s imagine circles with in each other. The innermost circle exists a hardware which is machinery part of the computer. Then outside of that circle, exists a kernel which is a program that directly controls hardware by communicating directly. The outershell of that circle is a shell which means to help interact with linux commands and kernel program that does the actual job. Now, the outer part of the circle exists applications which are the term we usually call as apps.&lt;/p&gt;

&lt;h2 id=&quot;bash-vs-zsh&quot;&gt;bash vs zsh&lt;/h2&gt;

&lt;p&gt;There are different types or products of shell and they are bash and zsh. For example, if you type echo $0, you will see that you are using bash. Now, let’s install zsh and run zsh. (sudo alt-install zsh) Now, type echo $0, you will see zsh. If we type something, we are using zshell to send the commands to kernel that will interact with hardware. NOw, what is so &lt;em&gt;special&lt;/em&gt; about these two?&lt;/p&gt;

&lt;p&gt;Of course, the commands differe and authority varies with the two programs. Zshell although, has some functionalities for users. For example, if you want to cd /hoome/ubuntu, you can just type cd /h/u/ and tab key will simplay convert those one char to the name of the directories. Why do we have these two kinds of shells?&lt;/p&gt;

&lt;p&gt;Different types of shells allow users to choose programs that are more suitable for them. Because, I am more comfortable with bash, I will use bash because I feel like learning new functionalities of zshell takes more time than typing some of the longer commands at bash shell. Also, because I am a software developer, I do not need to know every little detail of commands that interact with kernel. It is up to users to choose what to use and this does not mean that I will stop learning about interactions of kernel and hardware through shells. At this time, this is the best for me so I will leave it up to you guys to choose the shell program!&lt;/p&gt;

&lt;h2 id=&quot;shell-script&quot;&gt;Shell Script&lt;/h2&gt;

&lt;p&gt;What is so called a “shell script?” A good comparison is a script that actors read. Scripts for movie starts show the flow of movies by showing what they have to say. It is same with shell scripts. It tells shell what to do and show the general flow of a program. In bash, if you type ls /bin -&amp;gt; it illustrates bunch of commands such as rm, mkdir, and etc. Now, let’s write a shell script.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; bak &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir bak
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;cp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.log bak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What the above program does is to check if current directory has bak as a file or directory, if it doesn’t, the file cretates a directory called bak and copies all the .log files to bak. The first line is called as a shebang and this indicates that the program runs under the directories of bin/bash. As mentioned earlier, under this folder, there exists numerous executables that run the functionalities.&lt;/p&gt;

&lt;p&gt;Also, .bashrc is a basic file that runs whenever the computer boots up and shell starts running. Therefore, putting codes using alias or put any code there will have run once you start the shell.&lt;/p&gt;

&lt;h2 id=&quot;process&quot;&gt;process&lt;/h2&gt;

&lt;p&gt;Let’s talk about hardwares first. We have a SSD, HDD, Ram, CPU, and etc. These are called storages, memory, and processors. These coexist because we have never reached a goal of more memories, better speed and less expansive. How does this work? one of the applications stored in the storage, runs on the memory. This application is then run on the processor. This program or app running on the CPU is called a process, an instance of working program.&lt;/p&gt;

&lt;p&gt;For example, all the commands called mkdir, top, rm, and etc are the commands under /bin or /sbin directories.&lt;/p&gt;

&lt;p&gt;Now, let’s explore the ways to oversee and control the processes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ps aux&lt;/li&gt;
  &lt;li&gt;top&lt;/li&gt;
  &lt;li&gt;htop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 commands allow users to see the processes through various categories and can control those processes by looking at these three commands.&lt;/p&gt;

&lt;h2 id=&quot;finding-a-file&quot;&gt;finding a file&lt;/h2&gt;

&lt;p&gt;Often times, we come across an instance when we remember what the file does but don’t recall neither the name of the file nor the location of the file. we use several commands:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;locate&lt;/li&gt;
  &lt;li&gt;find -&amp;gt; find / -name *.log&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First of all, locate looks for the database and finds the argument after the command find, looks for the name of the directory and generally, we use regex (regular expressions) for that.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;background&lt;/h2&gt;

&lt;p&gt;It is important to understand how the program can run on foreground or background. Foreground is easy because it is what you are running and working on right now. Then, how do we run programs on background? When we run a program, we can simply add “&amp;amp;” at the end of the command to run the program on the background. Another way is to write program on vim or nano and press ctrl + z to put it on the background, if we want to return, we can just type fg to have that background process to come foreground. In order to see background processes, we simply type jobs. So it is important to keep track of background to see which programs are running and kill them.&lt;/p&gt;</content><author><name>jgam</name></author><category term="linux" /><category term="jgam" /><category term="Linux" /><category term="system programming" /><category term="system calls" /><category term="Operating system" /><summary type="html">IO Redirection</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">quicksort VS mergesort</title><link href="http://localhost:4000/algorithm4/" rel="alternate" type="text/html" title="quicksort VS mergesort" /><published>2019-04-22T00:00:00+09:00</published><updated>2019-04-22T00:00:00+09:00</updated><id>http://localhost:4000/algorithm4</id><content type="html" xml:base="http://localhost:4000/algorithm4/">&lt;h2 id=&quot;quick-sort-and-merge-sort&quot;&gt;quick sort and merge sort&lt;/h2&gt;

&lt;p&gt;I will start with comparing them since that makes it easier to understand each method better. Both of the sorting algorithms use the term “divide and conquer.” Quick sort usually picks the first or the last element as a pivot and divides the array based on the pivots: left side to be elements less than the pivot and the right side to be elements that are larger than the pivot. Then it sorts each side accordingly and combine them. This is dividing the whole array into two and sort each and combine later. Similarly, merge sort divides arrray consistently from the half point until it gets to a single element. Then they move up the trees to order the elements. Finally, it reaches to the sorted array.&lt;/p&gt;

&lt;h2 id=&quot;complexity&quot;&gt;complexity&lt;/h2&gt;

&lt;p&gt;While both algorithms use similar divide and concquer, quick sort algorithm’s complexity depends on the pivot it chooses. Therefore average case for both algorithms are O(nlog) where wortcase for merge is O(nlogn) and the worstcase for quick sort is O(n^2). Why does quick sort give O(n^2)? because, if the pivot turns out to be the smallest or the largest element, it doesn’t divide the array into two parts, rather, it does not divide the array and it is merely just simple linear sorting algorithms.&lt;/p&gt;

&lt;h2 id=&quot;difference&quot;&gt;Difference&lt;/h2&gt;

&lt;p&gt;Now, while looking similar the two methods do have difference. Say if we have small data set, instead of dividing the array into halp and half until it gets to one element, it is much faster to use quick sort and divide smaller two arrays then combine it. However, if the data set is large, it is obviously better to use merge sort because its runtime is constant no matter how big the data set is, although it requires lots of space.&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="algorithm" /><category term="quicksort" /><category term="mergesort" /><category term="backend" /><summary type="html">quick sort and merge sort</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">longest palindrome in a substring?</title><link href="http://localhost:4000/algorithm3/" rel="alternate" type="text/html" title="longest palindrome in a substring?" /><published>2019-04-16T00:00:00+09:00</published><updated>2019-04-16T00:00:00+09:00</updated><id>http://localhost:4000/algorithm3</id><content type="html" xml:base="http://localhost:4000/algorithm3/">&lt;h2 id=&quot;longest-palindrome-in-a-substring&quot;&gt;longest palindrome in a substring&lt;/h2&gt;

&lt;p&gt;We often face problems like palindromes. What is palindrome? it is a combination of two strings that are reversely ordered to each other and the middle character of the combined string can be diregarded. This wording is little rough until you see the actual example.&lt;/p&gt;

&lt;p&gt;abba -&amp;gt; palindrome
abbb -&amp;gt; not a palindrome
abcba -&amp;gt; palindrome&lt;/p&gt;

&lt;p&gt;So, now our task is to search through longest palindromes and return the length of the longest palindrome.&lt;/p&gt;

&lt;h2 id=&quot;manachars-algorithm&quot;&gt;Manachar’s Algorithm&lt;/h2&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="algorithm" /><category term="mathematics" /><category term="Manachar's algorithm" /><category term="backend" /><summary type="html">longest palindrome in a substring</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">Directions Reductions</title><link href="http://localhost:4000/algorithm2/" rel="alternate" type="text/html" title="Directions Reductions" /><published>2019-04-15T00:00:00+09:00</published><updated>2019-04-15T00:00:00+09:00</updated><id>http://localhost:4000/algorithm2</id><content type="html" xml:base="http://localhost:4000/algorithm2/">&lt;h2 id=&quot;directions-reductions&quot;&gt;Directions Reductions&lt;/h2&gt;

&lt;p&gt;So I was hoping to use Map reduce through this problem. However, I found another fancy way which is to use pointer of this problem. The problem asks for directions to be reduced. For example the array has many directinos as the following:
[North, south, south]&lt;/p&gt;

&lt;p&gt;This set of directions can be reduced to [South]&lt;/p&gt;

&lt;p&gt;I was thinking map &amp;amp; reduce but using the pointers can get away with this problem. Here is the code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirReduc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NORTH&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;EAST&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;WEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;WEST&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;EAST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the pointer i either increases or decreases meaning, if we move forward because the array met the position conditions, then move back to see if the old value and the new value match the cancelling out conditions. In this way, it is possible for the array to be reduced in the best way possible while looping through the array once. Also, because each element is critical for this problem, I think the best possible time complexity for this problem is linear which is N, the length of input array.&lt;/p&gt;

&lt;p&gt;Through this problem, I learned a slick trick about the pointers and reducing the duplicates. Also, I thought about many other linear time solutions including using the map although this was 2 * N time complexity, it still works with going through the map after putting all the keys and values, and sort them out with the numbers.&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="mathematics" /><category term="algorithm" /><category term="map-reduce" /><category term="pointer" /><summary type="html">Directions Reductions</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">GCD &amp;amp; LCM</title><link href="http://localhost:4000/algorithm/" rel="alternate" type="text/html" title="GCD &amp; LCM" /><published>2019-04-15T00:00:00+09:00</published><updated>2019-04-15T00:00:00+09:00</updated><id>http://localhost:4000/algorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/">&lt;h2 id=&quot;greatest-common-divisor-and-least-common-factor&quot;&gt;Greatest Common Divisor and Least Common Factor&lt;/h2&gt;

&lt;p&gt;One of the very basic mathematical terms people across is GCD and LCF. My written version of getting the GCD is to divide two numbers with prime numbers until the two numbers are no longer divisible. Then, multiply all those prime numbers to get the GCD. Getting LCF, however, is not that clear other than check if the two numbers have common factors and keep multiplying until the number is both divisible by two numbers.&lt;/p&gt;

&lt;h2 id=&quot;lcf&quot;&gt;LCF&lt;/h2&gt;

&lt;p&gt;However, the formula for getting a Least common factor is to multiply two numbers and divide that number by GCD. this makes sense because in order to get LCF, we divide the two numbers wiht prime until they are not divisble and multiply all the prime numbers we used to divide each number and the numbers that are not divisble anymore. Simply put, this is just primenumbers * divisible numbers. We know that multiplying prime numbers to that number again will be just a multiplication of the two numbers.&lt;/p&gt;

&lt;p&gt;The formula is now clear:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;LCF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gcd&quot;&gt;GCD&lt;/h2&gt;

&lt;p&gt;Let’s first represent easier way of getting GCD which is the brute force way.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The number returned there is simply a number that both divides a and b which becomes the Greatest Common Divisor. Any smarter way to do it?&lt;/p&gt;

&lt;h2 id=&quot;euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/h2&gt;

&lt;p&gt;Previously, we are looping through the minimum number of (a,b). Now we are going to loop through log(min(a,b)) with Eucledian Algorithm&lt;/p&gt;

&lt;p&gt;Suppose that we have a and b and if a mod b (where we say b is smaller number of (a,b)), is eqaul to 0, we simply return b which becomes GCD. If a mod b is not equal to 0, we run b mod (a mod b) until we find the case where larger_number mod smaller_number is equal to 0. This way, we are emerely going through (b, a mod b, (a mod b)mod b), …) This gives the complexity of O(log(N)).&lt;/p&gt;

&lt;p&gt;[here is the link to Euclidean code!][https://github.com/jgam/EloquentJavascript/codewars/5kyu/convertFrac.js]&lt;/p&gt;

&lt;p&gt;The code passed without any problems other than the number of tries it took to actually implement the algorithm. After solving the problem, without any debugging, I thought about a marchine learning engineer’s quote, &lt;em&gt;“Learn from the past, and learn from the present. We can predict the future.”&lt;/em&gt; I am not sure how to apply Euclidean algorithm in the future, but I surely know that implementing the algorithms off of mathematical formula, definitely works and reduces runtime which is critical factor in computer science.&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="mathematics" /><category term="algorithm" /><category term="GCD" /><category term="LCM" /><summary type="html">Greatest Common Divisor and Least Common Factor</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">JavaScript OOP</title><link href="http://localhost:4000/javascript7/" rel="alternate" type="text/html" title="JavaScript OOP" /><published>2019-04-15T00:00:00+09:00</published><updated>2019-04-15T00:00:00+09:00</updated><id>http://localhost:4000/javascript7</id><content type="html" xml:base="http://localhost:4000/javascript7/"></content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="Object Oriented Programming" /><category term="Javascript" /><category term="full stack" /><category term="backend" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">What is IoT?</title><link href="http://localhost:4000/Iot1/" rel="alternate" type="text/html" title="What is IoT?" /><published>2019-04-12T00:00:00+09:00</published><updated>2019-04-12T00:00:00+09:00</updated><id>http://localhost:4000/Iot1</id><content type="html" xml:base="http://localhost:4000/Iot1/">&lt;h2 id=&quot;the-internet-of-things&quot;&gt;The Internet of Things&lt;/h2&gt;

&lt;p&gt;What is IoT? I have been wrondering what the term actually means. It is by Wikipedia, defined as the internet of things. So, does that mean it is some soft of internet, like web? or the ease of accessing information? After reading quite a few articles(may be 1 or 2), I found out that it is a somewhat broad concept of becoming smarter and smarter. One example, I thought about is a remote controller from the movie called &lt;a href=&quot;https://en.wikipedia.org/wiki/Click_(2006_film)&quot;&gt;“Click”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Long story short, the remote controller controls the protagonist, Adam Sandler’s life. He can &lt;em&gt;literally&lt;/em&gt; fast-forward and rewind his life to the time periods where he wants to be.&lt;/p&gt;

&lt;p&gt;Now let’s go back to the IoT. Surprisingly, the remote controller that I mentioned is happening in our life by little and little. When I first got an ipod Touch, I was so shocked to go online through safari and check the ESPN soccer highlights. (of course the UI at that time was not as great as that of today but STILL) Similarly, through your phone, you can even register a Language test(Yes, I did register JLPT on my iphone.)&lt;/p&gt;

&lt;p&gt;Yes, IoT is an interconnected network thta allows devices such as phones, computers, any other house hold goods to not only communicate with humans but also with each other.&lt;/p&gt;

&lt;p&gt;One example I can think of is, when we run a laundary, the dryer automatically hits up five minutes before the laundary gets done or even the closet lines up empty hangers so that we can use them to dry our laundaries. COOL, isn’t it?&lt;/p&gt;

&lt;h2 id=&quot;assets-of-iot&quot;&gt;Assets of IoT&lt;/h2&gt;

&lt;p&gt;After a research, I found out that there exist core takeaways in IoT or at least to proceed any IoT related projects with these things in mind.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data is the new currency&lt;/li&gt;
  &lt;li&gt;Faith and Lead&lt;/li&gt;
  &lt;li&gt;IoT Book&lt;/li&gt;
  &lt;li&gt;Business should take the driving seat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First of all, let me redefine the IoT. IoT is not a single technology, rather a term used to characterize interconnected “smart objects” or things and their unique ability to collate and, in turn, share information about their world. In other worlds, we empower our “things” in various contexts to ultimately gather data, which is specific to their environment. So what to do with after gathering data? Let’s put it this way. I believe that if we have a data from the past, and present, we can predict the future and explain with future data. Example is a lots of machine learning technologies that predict the future.&lt;/p&gt;

&lt;p&gt;Now, because this is a broad field, I believe even though I have never worked in such IoT industries, people will encounter “what the others are doing?” Yes, it is a broad mindset but you have to believe in yourself of the products and the results you produce. Let’s just take a leap of faith and lead the self or the people around you to maybe become the first person to achieve it?&lt;/p&gt;

&lt;p&gt;Because of IoT’s characteristics, I assume lots of teams mingle together to not only develop the products together but also to share their problems and thoughts. Ok, the key is communication and it is very hard when you are from different backgrounds especially when you are from differnt fields. Yes, integral point is to be on the SAME page. Wiuth this in mind, a book, of sorts, should be created so that each team member has the same understanding. If I get to work on IoT, I will first check how this is happening to see if the teams are actually collaborating or not.&lt;/p&gt;

&lt;p&gt;Of course, lots of tech companies are planning to offer an IoT solution. I really believe the statement of the business strategy defining your IoT strategy should keep in mind that the technology that empowers your IoT strategy is defined by real-world use cases, which help shpae your overall vision. Yes, we are developing IoT but what is a strategy? is it tangible? We need to start developing solutions that solve real-world problems rather than meremly &lt;strong&gt;having strategy and devloping IoT.&lt;/strong&gt;&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="IoT" /><category term="Rakuten" /><category term="crimson" /><category term="algorithm" /><summary type="html">The Internet of Things</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">React Native</title><link href="http://localhost:4000/reactnative/" rel="alternate" type="text/html" title="React Native" /><published>2019-04-10T00:00:00+09:00</published><updated>2019-04-10T00:00:00+09:00</updated><id>http://localhost:4000/reactnative</id><content type="html" xml:base="http://localhost:4000/reactnative/">&lt;h2 id=&quot;what-is-reactive-native&quot;&gt;WHat is Reactive Native?&lt;/h2&gt;

&lt;h2 id=&quot;several-important-files&quot;&gt;Several important files&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;index.js -&amp;gt; kicks off the files and runs the function App component in App.js&lt;/li&gt;
  &lt;li&gt;App.js -&amp;gt; we render and import original react. React native doesn’t work with the normal DOM or normal CSS or normal Javascript and all of these special things are given to you as with React Native.&lt;/li&gt;
  &lt;li&gt;the style variable is a style sheet object of react native and can be assigned to component. It emulates CSS.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="React" /><category term="Javascript" /><category term="frontend" /><category term="react native" /><summary type="html">WHat is Reactive Native?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">Database</title><link href="http://localhost:4000/frontend6/" rel="alternate" type="text/html" title="Database" /><published>2019-04-10T00:00:00+09:00</published><updated>2019-04-10T00:00:00+09:00</updated><id>http://localhost:4000/frontend6</id><content type="html" xml:base="http://localhost:4000/frontend6/">&lt;h2 id=&quot;database&quot;&gt;Database&lt;/h2&gt;

&lt;p&gt;Database is safe.&lt;/p&gt;

&lt;p&gt;We can keep the files and other informations safe.&lt;/p&gt;

&lt;p&gt;Database is fast(index)&lt;/p&gt;

&lt;p&gt;Database system, through index, organizes the data well so that we can find the information we want faster than looking through the piles of information&lt;/p&gt;

&lt;p&gt;Database is controllable&lt;/p&gt;

&lt;p&gt;We can control the database through coding.&lt;/p&gt;

&lt;p&gt;Now what program are we going to use for database?&lt;/p&gt;

&lt;p&gt;##MySql&lt;/p&gt;

&lt;p&gt;Opensource database, MySQL was sold to Sun from MySQL AB and Sun sold it to Oracle so now Oracle owns MySQL. However, some of the engineers that created MySQL who did not compromise with Oracle, created another database called MariaDB. The improvements on Maria DB increases infinitely and this is definitely intresting point to observe as a developer.&lt;/p&gt;

&lt;p&gt;SQL stands for structured query language. SQL serves as a language that structures database. Now, when there exists a web browser, looking for “a.php”, the webserver finds the php file and the file communicates with MySQL. This demonstrates the cycle of client and server. Here is the demonstrated picture.&lt;/p&gt;

&lt;h2 id=&quot;server-client-in-mysql&quot;&gt;Server Client in MySQL&lt;/h2&gt;

&lt;p&gt;We will be using MySQL monitor to contorl MySQL server becuase server needs to be controlled.&lt;/p&gt;

&lt;p&gt;Let’s run the mySQL with the command : ./mysql -hlocalhost -uroot -p&lt;/p&gt;

&lt;p&gt;The parameters after ./mysql represents the following:&lt;/p&gt;

&lt;p&gt;-hlocalhost is the address we want to run MySQL controller
-uroot is the user authority of MySQL controller
-p is to hide the password and asks for the password&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="Review" /><category term="Javascript" /><category term="full stack" /><category term="backend" /><summary type="html">Database</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">Higher-order functions?: Part2</title><link href="http://localhost:4000/javascriptreview/" rel="alternate" type="text/html" title="Higher-order functions?: Part2" /><published>2019-04-04T00:00:00+09:00</published><updated>2019-04-04T00:00:00+09:00</updated><id>http://localhost:4000/javascriptreview</id><content type="html" xml:base="http://localhost:4000/javascriptreview/">&lt;h2 id=&quot;defining-a-function&quot;&gt;Defining a function&lt;/h2&gt;

&lt;p&gt;A function definition is a regular binding where the value of the binding is a function. Functions have a set of parameters (in this case, only x) and a body, which contains the statements that are to be executed when the function is called. The function body of a function created this way must always be wrapped in braces, even when it consists of only a single statement.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;power&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 1024&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is regular way of declaring functions and as you can see the function takes in two parameters and whenever we call that function within two values, those automatically become parameters.&lt;/p&gt;

&lt;p&gt;Now, the function can either return a value or not. Those functions that do not return anything are marked as undefined. Parameters to a function behave like regular binings, but their initial values are given by the &lt;em&gt;caller&lt;/em&gt; of the function, not the code in the functino itself.&lt;/p&gt;

&lt;h2 id=&quot;bindings-and-scopes&quot;&gt;Bindings and Scopes&lt;/h2&gt;

&lt;p&gt;Each binding has a scope, which is the part of the program in which the binding is visible. For bindings defined outside of any function or block, the scope is the whole program-you can refer to such bindings wherever you want.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is the difference of above two declarations? The difference is that const data types can be accessed anywhere while let can be accessed, following the rules of scopes.&lt;/p&gt;

&lt;h2 id=&quot;back-to-functions&quot;&gt;Back to functions&lt;/h2&gt;

&lt;p&gt;In javascript there are three ways to define functions.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//regular function declaration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//shorter way of function declaration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//arrow functions&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These 3 ways of declaring functions. One thing to note is that, second way of declaring function is the original way of declaration personally. Since I use lots of python. The first case, we set a variable “hello” equal to the function. What is the type of hello?&lt;/p&gt;

&lt;p&gt;Interestingly, the type of hello is function. What does this refer to? The functions as values are allowed in javascript.&lt;/p&gt;

&lt;p&gt;Another note is the last way, arrow functions. The arrow functions indicate that the variable is passed in as a parameter and if we have multiples, we need parenthesis wrapping around the list of inputs. What about a function without a parameter? we can just pass in empty list which is ().&lt;/p&gt;

&lt;h2 id=&quot;the-call-stack&quot;&gt;The Call Stack&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the call stack. (It is very simple.) The control of the code starts at the first line but it is a mere declaration so moves on to greet(“Harry”). Here the control sees the function call and looks for the function declaration and go inside, taking the parameter, does its actions and returns to wherever it was called. Now the greet(“Harry”) is completed and move to the next console.log(“Bye”).&lt;/p&gt;

&lt;p&gt;not in function
   in greet
        in console.log
   in greet
not in function
   in console.log
not in function&lt;/p&gt;

&lt;p&gt;This is an example of the calls tack and it is important to keep up with the call stack due to avoid errors such as “stack overflow.”&lt;/p&gt;

&lt;h2 id=&quot;closure&quot;&gt;Closure&lt;/h2&gt;

&lt;p&gt;Being able to reference a specific instance of a local binding in an enclosing scope – is called &lt;em&gt;closure&lt;/em&gt;. A function that references bindings from local scopes around it is called a closure.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// → 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I said earlier is probably very &lt;strong&gt;abstract&lt;/strong&gt;. It is fine because that definition is literally a book definition. What I understand closure is to reference local bindings even if the function of those bindings had been called. Let’s break that exaple into parts.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;twice is a variable, a type of function and the function taking 2 as its input. what is the function multiplier? it is a function that takes in one input and returns &lt;strong&gt;another function&lt;/strong&gt; as the following:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After return, this is a arrow function which is the third way of declaring function so the function multiplier returns function that passes factor as that returned function’s outer scope’s variable. Now getting back to the declaration above, twice is a new function as following:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now going back to the whole example, we are finally calling console.log() on twice, passing in 5 as its input.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the return value should be 10 and this is what is happening. Summing up, what is the closure in this? The closure is how when console.log(twice(5)) is called, the ability to access factor which is 2 and previously called. This is a closure and is very helpful because it not only frees people from having to worry about lifetimes of bindings but also makes it possible to use function values in some creative ways.&lt;/p&gt;</content><author><name>jgam</name></author><category term="blog" /><category term="jgam" /><category term="Review" /><category term="Javascript" /><category term="full stack" /><category term="backend" /><summary type="html">Defining a function</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry></feed>