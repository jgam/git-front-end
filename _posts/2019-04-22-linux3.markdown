---
title: "Technical temrs for Linux"
layout: post
date: 2019-04-22
image: /assets/images/markdown.jpg
headerImage: false
tag:
- jgam
- Linux
- system programming
- system calls
- Operating system
category: linux
author: jgam
description: Linux
---

## IO Redirection

IO redirection is an abbreviation of Input output redirection. What is input and output and what does it mean to redirect them?

In computing, there exists a process, an instance of working program or command. This process can work by itself but usually and conventionally, it takes inputs and produces results depending on the inputs.

```javascript
console.log('hello');
```

```javascript
function printing(input){
    conosle.log('hello'+' '+input);
}

printing('korin');
```

Two processes have a huge difference. The first one does not take input whereas the second one takes input. Using inputs, we can program dynamically, which means we can use the same functios to different inputs and don't have to write same code over and over.

Now what is redirection?

When we do console.log, we get the results on CLI, or terminal(MAC lovers.) That is because, output is supposed to be shown as an standard output(stdout.) We can redirect the output to a file as well.

```javascript
console.log('hello') > result.txt
```

This time, hello doesn't not get printed on terminal. Rather, a new file is created named as result.txt. This file then contains 'hello' on the first line. What happened? We redirected standard output to a file called result.txt.

## Linux & Shell

Let's imagine circles with in each other. The innermost circle exists a hardware which is machinery part of the computer. Then outside of that circle, exists a kernel which is a program that directly controls hardware by communicating directly. The outershell of that circle is a shell which means to help interact with linux commands and kernel program that does the actual job. Now, the outer part of the circle exists applications which are the term we usually call as apps.

## bash vs zsh

There are different types or products of shell and they are bash and zsh. For example, if you type echo $0, you will see that you are using bash. Now, let's install zsh and run zsh. (sudo alt-install zsh) Now, type echo $0, you will see zsh. If we type something, we are using zshell to send the commands to kernel that will interact with hardware. NOw, what is so *special* about these two?

Of course, the commands differe and authority varies with the two programs. Zshell although, has some functionalities for users. For example, if you want to cd /hoome/ubuntu, you can just type cd /h/u/ and tab key will simplay convert those one char to the name of the directories. Why do we have these two kinds of shells?

Different types of shells allow users to choose programs that are more suitable for them. Because, I am more comfortable with bash, I will use bash because I feel like learning new functionalities of zshell takes more time than typing some of the longer commands at bash shell. Also, because I am a software developer, I do not need to know every little detail of commands that interact with kernel. It is up to users to choose what to use and this does not mean that I will stop learning about interactions of kernel and hardware through shells. At this time, this is the best for me so I will leave it up to you guys to choose the shell program!

## Shell Script

What is so called a "shell script?" A good comparison is a script that actors read. Scripts for movie starts show the flow of movies by showing what they have to say. It is same with shell scripts. It tells shell what to do and show the general flow of a program. In bash, if you type ls /bin -> it illustrates bunch of commands such as rm, mkdir, and etc. Now, let's write a shell script.

```shell
#!/bin/bash

if ! [ -d bak ] then
    mkdir bak
fi

cp *.log bak
```

What the above program does is to check if current directory has bak as a file or directory, if it doesn't, the file cretates a directory called bak and copies all the .log files to bak. The first line is called as a shebang and this indicates that the program runs under the directories of bin/bash. As mentioned earlier, under this folder, there exists numerous executables that run the functionalities.

Also, .bashrc is a basic file that runs whenever the computer boots up and shell starts running. Therefore, putting codes using alias or put any code there will have run once you start the shell.

## process

Let's talk about hardwares first. We have a SSD, HDD, Ram, CPU, and etc. These are called storages, memory, and processors. These coexist because we have never reached a goal of more memories, better speed and less expansive. How does this work? one of the applications stored in the storage, runs on the memory. This application is then run on the processor. This program or app running on the CPU is called a process, an instance of working program.

For example, all the commands called mkdir, top, rm, and etc are the commands under /bin or /sbin directories.

Now, let's explore the ways to oversee and control the processes.

1. ps aux
2. top
3. htop

These 3 commands allow users to see the processes through various categories and can control those processes by looking at these three commands.

## finding a file

Often times, we come across an instance when we remember what the file does but don't recall neither the name of the file nor the location of the file. we use several commands:
1. locate
2. find -> find / -name *.log

First of all, locate looks for the database and finds the argument after the command find, looks for the name of the directory and generally, we use regex (regular expressions) for that.

## background

It is important to understand how the program can run on foreground or background. Foreground is easy because it is what you are running and working on right now. Then, how do we run programs on background? When we run a program, we can simply add "&" at the end of the command to run the program on the background. Another way is to write program on vim or nano and press ctrl + z to put it on the background, if we want to return, we can just type fg to have that background process to come foreground. In order to see background processes, we simply type jobs. So it is important to keep track of background to see which programs are running and kill them.


